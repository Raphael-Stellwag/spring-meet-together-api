openapi: 3.0.1
info:
  title: Swagger Meet Together
  description: This file documents the meet-together api.
  termsOfService: ""
  version: 1.0.0
servers:
  - url: https://localhost:8080
  - url: http://localhost:8080
tags:
  - name: event
    description: Operations about event
  - name: user
    description: Operations about user
  - name: token
    description: Operations about jwt (JSON Web Tokens)
  - name: message
    description: Messages from users in an event. The messages can also be generated
  - name: time place suggestion
    description: Suggest a place and time to meet
  - name: mail
    description: Send a mail
  - name: ping
    description: Test connection
paths:
  /api/v1/ping:
    get:
      tags:
        - ping
      summary: Test if the server is reachable
      operationId: ping
      responses:
        200:
          description: successful operation
          content: { }
      x-swagger-router-controller: Ping
  /api/v1/user:
    post:
      tags:
        - user
      summary: Add a new user to the database
      operationId: addUser
      requestBody:
        description: User object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input, probably missing neccessary properties in body
          content: { }
      x-swagger-router-controller: User
      x-codegen-request-body-name: body
  /api/v1/user/login:
    put:
      tags:
        - user
      summary: User wants to login to registered User
      operationId: loginUser
      requestBody:
        description: User object with password & email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: User credentials not valid
          content: { }
        403:
          description: JWT not valid
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: User
      x-codegen-request-body-name: user
  /api/v1/user/{userId}/register:
    put:
      tags:
        - user
      summary: user decided to register an account (with password)
      operationId: registerUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      requestBody:
        description: user object with name, email and password property
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation, returns user without password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Already registered
          content: { }
        403:
          description: Token was not valid
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: User
      x-codegen-request-body-name: user
  /api/v1/user/{userId}/rename:
    put:
      tags:
        - user
      summary: changes the name of a user
      description: Returns a single user
      operationId: renameUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      requestBody:
        description: user object just with name property
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation, returns user without password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: Token was not valid
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: User
      x-codegen-request-body-name: username
  /api/v1/user/{userId}/event:
    get:
      tags:
        - event
      summary: get all events of a user
      operationId: getEvents
      parameters:
        - name: userId
          in: path
          description: ID of user who creates the new event
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        403:
          description: Token was not valid
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
    post:
      tags:
        - event
      summary: creates a new event
      operationId: addEvent
      parameters:
        - name: userId
          in: path
          description: ID of user who creates the new event
          required: true
          schema:
            type: string
      requestBody:
        description: Event data to store in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Event Data not valid
          content: { }
        403:
          description: Token was not valid
          content: { }
        404:
          description: User not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
      x-codegen-request-body-name: body
  /api/v1/user/{userId}/event/{eventId}:
    put:
      tags:
        - event
      summary: updates an existing event
      operationId: updateEvent
      parameters:
        - name: userId
          in: path
          description: ID of user who has created the existing event
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          description: ID of event which needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Event data to update in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Event Data not valid, User not allowed to edit this event
          content: { }
        403:
          description: Token was not valid
          content: { }
        404:
          description: User or Event not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
      x-codegen-request-body-name: eventData
    delete:
      tags:
        - event
      summary: deletes the existing event
      operationId: deleteEvent
      parameters:
        - name: userId
          in: path
          description: ID of user who has created the existing event
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          description: ID of event which needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: User not allowed to delete this event
          content: { }
        403:
          description: Token was not valid
          content: { }
        404:
          description: User or Event not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
  /api/v1/event/{eventId}/user/{userId}:
    put:
      tags:
        - event
      summary: Add an User to the event
      operationId: addUserToEvent
      parameters:
        - name: userId
          in: path
          description: ID of user who has created the existing event
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          description: ID of event which needs to be updated
          required: true
          schema:
            type: string
        - name: accesstoken
          in: query
          description: Accesstoken from event to be allowed to access the event
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: accesstoken not valid; User is already in the event
          content: { }
        403:
          description: Token was not valid
          content: { }
        404:
          description: User or Event not found
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
    delete:
      tags:
        - event
      summary: Deletes the user from the event
      description: User dont want to particapte in the event anymore. He cant be creator
        of the event
      operationId: deleteUserFromEvent
      parameters:
        - name: userId
          in: path
          description: ID of user who has created the existing event
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          description: ID of event which needs to be updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content: { }
        403:
          description: authorization failed
          content: { }
        404:
          description: User is not in this event
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
  /api/v1/event/{eventId}/participants:
    get:
      tags:
        - event
      summary: Get all participants of an event
      operationId: getAllParticipants
      parameters:
        - name: eventId
          in: path
          description: ID of event to get participants from
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participants'
        403:
          description: authorization failed
          content: { }
        404:
          description: Event does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Event
  /api/v1/event/{eventId}/time-place-suggestion:
    get:
      tags:
        - time place suggestion
      summary: Get all Time-Place suggestions of an event
      operationId: getAllTimePlaceSuggestions
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimePlaceSuggestions'
        403:
          description: authorization failed
          content: { }
        404:
          description: Event does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: TimePlaceSuggestion
    post:
      tags:
        - time place suggestion
      summary: Creates a new Time-Place suggestions with no user added to it
      operationId: createsTimePlaceSuggestions
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
      requestBody:
        description: time-place suggestion that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimePlaceSuggestion'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimePlaceSuggestion'
        400:
          description: Invalid input data
          content: { }
        403:
          description: authorization failed
          content: { }
        404:
          description: Event does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: TimePlaceSuggestion
      x-codegen-request-body-name: timePlaceSuggestion
  /api/v1/event/{eventId}/time-place-suggestion/{timePlaceId}/user/{userId}:
    put:
      tags:
        - time place suggestion
      summary: Adds User to existing Time-Place suggestions of an event
      operationId: addUserToTimePlaceSuggestion
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
        - name: timePlaceId
          in: path
          description: ID of time-place suggestion
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimePlaceSuggestion'
        400:
          description: User is already in the time-place suggestion; user is not in
            the event
          content: { }
        403:
          description: authorization failed
          content: { }
        404:
          description: Event / User / Time-place suggestion does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: TimePlaceSuggestion
    delete:
      tags:
        - time place suggestion
      summary: Deletes User from existing Time-Place suggestions of an event
      operationId: deleteUserFromTimePlaceSuggestion
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
        - name: timePlaceId
          in: path
          description: ID of time-place suggestion
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimePlaceSuggestion'
        400:
          description: User is not in the time-place suggestion
          content: { }
        403:
          description: authorization failed
          content: { }
        404:
          description: Event / User / Time-place suggestion does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: TimePlaceSuggestion
  /api/v1/event/{eventId}/time-place-suggestion/{timePlaceId}/user/{userId}/choosen:
    put:
      tags:
        - time place suggestion
      summary: Sets an existing Time-Place suggestions to the final details of the
        event
      operationId: timePlaceSuggestionChoosen
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
        - name: timePlaceId
          in: path
          description: ID of time-place suggestion
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: User is not in the event
          content: { }
        401:
          description: User not allowed to set the time-place suggestion
          content: { }
        403:
          description: authorization failed
          content: { }
        404:
          description: Event / User / Time-place suggestion does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: TimePlaceSuggestion
  /api/v1/event/{eventId}/messages:
    get:
      tags:
        - message
      summary: Get Messages from an event
      operationId: getMessages
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: Number of messages to return
          schema:
            type: string
        - name: last-message
          in: query
          description: ID of last message
          schema:
            type: string
        - name: direction
          in: query
          description: Direction (forward -> next messages; backward -> get Messages
            before last-messages)
          schema:
            type: string
            enum:
              - forward
              - backward
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        403:
          description: authorization failed
          content: { }
        404:
          description: Event does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Message
  /api/v1/event/{eventId}/user/{userId}/message:
    post:
      tags:
        - message
      summary: Creates a new Message in an event
      operationId: addMessage
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of User
          required: true
          schema:
            type: string
      requestBody:
        description: message that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Invalid input data, User not in Event
          content: { }
        403:
          description: authorization failed
          content: { }
        404:
          description: Event / User does not exist
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Message
      x-codegen-request-body-name: message
  /api/v1/event/{eventId}/mail:
    post:
      tags:
        - mail
      summary: Sends a mail to some users
      operationId: sendMail
      parameters:
        - name: eventId
          in: path
          description: ID of event
          required: true
          schema:
            type: string
      requestBody:
        description: Mail Body to send to the recipients
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mail'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Invalid input data
          content: { }
        403:
          description: authorization failed
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Mail
      x-codegen-request-body-name: mail_body
  /api/v1/token/create:
    get:
      tags:
        - token
      summary: Creates a new JWT for the given user
      operationId: createToken
      security:
        - basicAuth: [ ]
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        403:
          description: User / Password combination was wrong
          content: { }
      x-swagger-router-controller: Token
  /api/v1/token/verify:
    get:
      tags:
        - token
      summary: Verifies the given token, if still valid
      operationId: verifyToken
      responses:
        200:
          description: successful operation
          content: { }
        410:
          description: Not anymore valid
          content: { }
      security:
        - jwtToken: [ ]
      x-swagger-router-controller: Token
components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
        expiration_date:
          type: string
          format: date-time
      example:
        token: token
        expiration_date: 2000-01-23T04:56:07.000+00:00
    Event:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        password:
          type: string
        accesstoken:
          type: string
        creator:
          type: boolean
          default: false
        place:
          type: string
        link:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        last_message_time:
          type: string
          format: date-time
        count_unread_messages:
          type: "integer"
          format: "int32"
      example:
        password: password
        name: name
        description: description
        accesstoken: accesstoken
        start_date: 2000-01-23T04:56:07.000+00:00
        id: 0
        end_date: 2000-01-23T04:56:07.000+00:00
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        password:
          type: string
        registered:
          type: boolean
          default: false
      example:
        name: name
        password: password
        id: 0
        registered: true
    Participant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        creator:
          type: boolean
          default: false
    Participants:
      type: array
      items:
        $ref: '#/components/schemas/Participant'
    TimePlaceSuggestion:
      type: object
      properties:
        id:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        place:
          type: string
        link:
          type: string
        can_attend:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
    TimePlaceSuggestions:
      type: array
      items:
        $ref: '#/components/schemas/TimePlaceSuggestion'
    Message:
      type: object
      properties:
        id:
          type: string
        user_name:
          type: string
        user_id:
          type: string
        event_id:
          type: string
        time:
          type: string
          format: date-time
        content:
          type: string
        generated:
          type: boolean
          default: false
        generated_content_description:
          type: string
          enum:
            - EVENT_CREATED
            - EVENT_UPDATED
            - USER_JOINED_EVENT
            - USER_LEFT_EVENT
            - TIME_PLACE_SUGGESTION_ADDED
            - TIME_PLACE_SUGGESTION_CHOOSEN
    Messages:
      type: array
      items:
        $ref: '#/components/schemas/Message'
    Mail:
      type: object
      properties:
        recipients:
          type: array
          items:
            type: string
        subject:
          type: string
        html_content:
          type: string
    ApiResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: "integer"
          format: "int32"
        timestamp:
          type: string
          format: date-time
        error:
          type: string

  securitySchemes:
    jwtToken:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      description: "Enter JWT Token"
    basicAuth:
      type: "http"
      scheme: "basic"